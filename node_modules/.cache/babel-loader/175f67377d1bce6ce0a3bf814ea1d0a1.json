{"ast":null,"code":"var _jsxFileName = \"/home/sajal/ReactApp/user-form-react-project/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\"); // const nameInputRef = useRef();\n  // const [isEnterNameValid, setIsEnteredName] = useState(false);\n\n  const [isEnterNameTouched, setEnteredNameTouched] = useState(false);\n  const [formIsValid, setForValidity] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && isEnterNameTouched;\n  useEffect(); // useEffect(() => {\n  //   if (isEnterNameValid) {\n  //     console.log(\"Input is valid\");\n  //   }\n  // }, [isEnterNameValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); // if (enteredName != \"\") {\n    //   setIsEnteredName(true);\n    // }\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true); // if (enteredName === \"\") {\n    //   setIsEnteredName(false);\n    //   return;\n    // }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    setEnteredName(\"\");\n    setEnteredNameTouched(false); // if (enteredName === \"\") {\n    //   setIsEnteredName(false);\n    //   return;\n    // }\n\n    console.log(enteredName);\n  };\n\n  const nameInputClasses = enteredNameIsValid ? \"form-control invalid\" : \"form-control \";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: enteredName,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \" Field must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"ZkhRSYjvFacBcITv7CSP0U78iWs=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/sajal/ReactApp/user-form-react-project/src/components/SimpleInput.js"],"names":["useRef","useState","useEffect","SimpleInput","props","enteredName","setEnteredName","isEnterNameTouched","setEnteredNameTouched","formIsValid","setForValidity","enteredNameIsValid","trim","nameInputIsInvalid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C,CAD6B,CAE7B;AACA;;AACA,QAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAMU,kBAAkB,GAAGN,WAAW,CAACO,IAAZ,OAAuB,EAAlD;AACA,QAAMC,kBAAkB,GAAG,CAACF,kBAAD,IAAuBJ,kBAAlD;AACAL,EAAAA,SAAS,GARoB,CAS7B;AACA;AACA;AACA;AACA;;AACA,QAAMY,sBAAsB,GAAIC,KAAD,IAAW;AACxCT,IAAAA,cAAc,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CADwC,CAExC;AACA;AACA;AACD,GALD;;AAOA,QAAMC,oBAAoB,GAAIH,KAAD,IAAW;AACtCP,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CADsC,CAEtC;AACA;AACA;AACA;AACD,GAND;;AAOA,QAAMW,qBAAqB,GAAIJ,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACK,cAAN;AACAZ,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAI,CAACG,kBAAL,EAAyB;AACvB;AACD;;AACDL,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,qBAAqB,CAAC,KAAD,CAArB,CARuC,CAUvC;AACA;AACA;AACA;;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYjB,WAAZ;AACD,GAfD;;AAgBA,QAAMkB,gBAAgB,GAAGZ,kBAAkB,GACvC,sBADuC,GAEvC,eAFJ;AAGA,sBACE;AAAM,IAAA,QAAQ,EAAEQ,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEI,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,KAAK,EAAElB,WADT;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,QAAQ,EAAES,sBAJZ;AAKE,QAAA,MAAM,EAAEI;AALV;AAAA;AAAA;AAAA;AAAA,cAFF,EASGL,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAnED;;GAAMV,W;;KAAAA,W;AAqEN,eAAeA,WAAf","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  // const nameInputRef = useRef();\n  // const [isEnterNameValid, setIsEnteredName] = useState(false);\n  const [isEnterNameTouched, setEnteredNameTouched] = useState(false);\n  const [formIsValid, setForValidity] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && isEnterNameTouched;\n  useEffect();\n  // useEffect(() => {\n  //   if (isEnterNameValid) {\n  //     console.log(\"Input is valid\");\n  //   }\n  // }, [isEnterNameValid]);\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n    // if (enteredName != \"\") {\n    //   setIsEnteredName(true);\n    // }\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n    // if (enteredName === \"\") {\n    //   setIsEnteredName(false);\n    //   return;\n    // }\n  };\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n\n    // if (enteredName === \"\") {\n    //   setIsEnteredName(false);\n    //   return;\n    // }\n    console.log(enteredName);\n  };\n  const nameInputClasses = enteredNameIsValid\n    ? \"form-control invalid\"\n    : \"form-control \";\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          value={enteredName}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\"> Field must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}